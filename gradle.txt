构建任务(Build Tasks)
java和Android通用的任务
在build文件中使用了Android或者Java插件之后就会自动创建一系列可以运行的任务。

Gradle 遵循约定大于配置的概念，在可能的情况下提供了合理的默认选项值。

Gradle中有如下一下默认约定的任务:
1. assemble
该任务包含了项目中的所有打包相关的任务，比如java项目中打的jar包，Android项目中打的apk
2. check
该任务包含了项目中所有验证相关的任务，比如运行测试的任务
3. build
该任务包含了assemble和check
4. clean
该任务会清空项目的所有的输出，删除所有在assemble任务中打的包

assemble, check 和 build 任务实际上并不做任何事情，它们其实只是为插件提供了一个钩子，真正的事情都是由插件来完成的。

这样的话，开发人员就不需要关心我到底运行的是一个java项目还是一个Android项目，也不用关心我到底使用了哪些gradle插件
，因为我都可以调用这些约定的任务来完成构建。

##
Android项目常用的任务
和其他gradle插件一样，Android插件也提供了一些默认的任务，比如assemble，check，build，clean，同时它也提供了一些自己特有的任务，比如：
1. connectedCheck
运行那些需要在真机或者模拟器上执行的检查任务，这些任务会并行地在所有连接的设备上运行
2. deviceCheck
使用APIs连接远程设备执行检查.主要用于CI(持续集成)服务上.
上面两个任务都会执行 assemble 和 check任务。新加这两个任务是很有必要的，这样可以保证我们可以运行那些不需要连接设备的检查任务。

注意：build任务并不依赖于deviceCheck或者connectedCheck

一个Android项目通常至少会有两种输出：debug apk和release apk。对应的gradle中有两个任务可以分别输出不同的apk：
assembleDebug
assembleRelease
它们两个都依赖于执行构建一个 APK所需的多个步骤的其他任务。assemble任务取则依赖于这两个任务，所以调用 assemble 将会构建出这两个 APKs。

提示：在命令行上，Gradle 支持任务名称的驼峰命名法的简写。例如：
gradle aR
相当于输入
gradle assembleRelease
只要没有其他任务匹配 “aR”

check锚记任务有它们自己的依赖项：
check
lint
connectedCheck
connectedAndroidTest
connectedUiAutomatorTest （暂未实现）
deviceCheck
这个任务依赖于当其他插件实现了测试扩展点时创建的任务。
最后，该插件为所有构建类型 （debug、release、test）创建了omstal/uninstall 任务，只要他们可以被安装（需要签名）。

Gradle 基于 Groovy 的丰富而可扩展的域描述语言(DSL)
Gradle 插件用户指南（1-3）
http://blog.csdn.net/maosidiaoxian/article/details/41944325

gradle的基本构建文件要求有一个默认的文件夹结构。Gradle 遵循约定大于配置的概念，在可能的情况下提供了合理的默认选项值。
基本项目开始于两个名为“source sets”的组件。即主源代码和测试代码。它们分别在：
src/main/
src/androidTest/
里面的每个文件夹中都存在对应的源代码组件的文件夹。
对于 Java 和 Android 插件，Java 源代码和 Java 资源的位置如下：
java/
resources/
对于Android 插件，Android所特有的额外的文件和文件夹是：
AndroidManifest.xml
res/
assets/
aidl/
rs/
jni/
注： src/androidTest/AndroidManifest.xml是不需要的，因为它会被自动创建。

为一个Java 项目重新配置 sourceSets可以通过如下方法实现：
sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}
注： srcDir实际上会将给定的文件夹添加到现有的源文件夹列表中 （这在Gradle 文档中没有提及，但这是实际的行为）。
如果要替换默认的源文件夹，您就要使用传入一个路径数组的srcDirs来代替。以下是使用涉及的对象的另一种不同的方法：
sourceSets {
    main.java.srcDirs = ['src/java']
    main.resources.srcDirs = ['src/resources']
}

之前的Eclipse项目迁移
Android 插件使用类似的语法，但因为它使用它自己的sourceSets，所以在android对象里面来实现。
这里有一个例子，使用旧的项目结构的主源码并重新映射androidTest sourceSet 到tests文件夹：
android {
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        androidTest.setRoot('tests')
    }
}
注意： 因为旧的结构把所有源文件 （java、 aidl、 renderscript和 java 资源） 都放在相同的文件夹中，
我们需要重新映射sourceSet的所有这些新组件到相同的src文件夹中。
注意： setRoot()会将整个sourceSet （和它的子文件夹） 移到一个新的文件夹中。这将移动src/androidTest/*到tests/*
下。这是 Android 专用的，不适用于 Java sourceSets。、

//Eclipse项目的gradle打包http://my.oschina.net/uboluo/blog/141905
tasks.withType(Compile) {
    options.encoding = "UTF-8"
}
android {
    compileSdkVersion XX
    buildToolsVersion "XX.X.X"
    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
      }
      lintOptions {
        abortOnError false
    }
    signingConfigs {
        debug {
        }
    }

    defaultConfig {
        versionCode getVersionCode()
        versionName getVersionName()
        minSdkVersion X
        targetSdkVersion XX
    }

    productFlavors {

    }

    buildTypes{
        release {
            signingConfig signingConfigs.myConfig
            runProguard true
            proguardFile 'proguard.cfg'
        }
    }

    sourceSets {
        main {
            manifest {
                srcFile 'AndroidManifest.xml'
            }
            java {
                srcDir 'src'
            }
            res {
                srcDir 'res'
            }
            assets {
                srcDir 'assets'
            }
            resources {
                srcDir 'src'
            }
            aidl {
                srcDir 'src'
            }
            jniLibs{
                srcDir 'libs'
            }
        }
    }
}